Bash -

Math Functions:

sum=$(($num1 + $num2)) $ calls the variables, one parenthesis for function, one parenthesis for math operation
    echo $sum
    
Arrays:

# Define array
grocery_list=(apple banana orange onio)

# print size/count of grocery list w/ "@"
echo ${#grocery_list{@}}
echo ${#grocery_list{*}}

# print entire list w/ "*". x = "wildcard", tells bash to grab all items in array
echo ${grocery_list[*]}
echo ${grocery_list{@}}

# print out first item in list (fundamental idea of computing - zero indexing)
echo ${grocery_list[0]}

# print out last item in list
echo ${grocery_list[${#grocery_list[@]}-1]}

# update/replace list items
grocery_list[0]="mango"

# append/add to list
new_item=chocolate
grocery_list+=($new_item)
grocery_list+="chips"
grocery_list[4]="tomato"

# deleting array elements or entire array
unset grocery_list[3]
unset grocery_list

# ops challenge 4 notes
paths=(./demo ./demo/dir1 ./demo/dir2 ./demo/dir3)
mkdir ${paths[*]}
ls 

Strings: 

# concatenate strings
str1="Hello,"
str2=" World"
str3=$str1$str2
echo "$str3"

# concat w/ literal strings
str1="Hello, "
str2="${str1}World"
echo "str2"

# Bash doesn't segregate variables by "type"
# variables are treated as int or str 

# concat variables with digits
str1="Hello, "
int1=3
str2=" Worlds"
str3="$str1$int1$str2"
echo "$str3"

# concat strings w/ += operator
str1="Hello, "
str1+=" World"
echo "$str1"

# concat strings in for loop
str=""
for ELEMENT in 'Hydrogen' 'Helium' 'Lithium' 'Beryllium'; do
    str+="${ELEMENT} "
done 
echo "$str"

Loops -

# for loop
for i in $array
do
echo $i
done
    Example: names=("Bob" "Jane" "Mike" "Sarah")
            for name in ${names[@]}
            do 
            echo $name
            done

# while loop
while [ condition ]; do
echo/function
done

    Example: count=4
            while [ $count -gt 0 ]; do
            echo "Value of count is: $count"
            count=$(($count -1))
            done

Conditionals:

lshw: lists HW info/details/specs

grep: searches for PATTERNS in each FILE

"|" doesn't print it out to screen, but sends to another cmd for further pipes/cmds

#!/bin/bash

# Main
# Search output of lshw cmd and return every line w/ the word "bridge" in it
lshw | grep "bridge" (don't hard code sudo in script, just use it before running file in terminal)

Bash -

Math Functions:

sum=$(($num1 + $num2)) $ calls the variables, one parenthesis for function, one parenthesis for math operation
    echo $sum
    
Arrays:

# Define array
grocery_list=(apple banana orange onio)

# print size/count of grocery list w/ "@"
echo ${#grocery_list{@}}
echo ${#grocery_list{*}}

# print entire list w/ "*". x = "wildcard", tells bash to grab all items in array
echo ${grocery_list[*]}
echo ${grocery_list{@}}

# print out first item in list (fundamental idea of computing - zero indexing)
echo ${grocery_list[0]}

# print out last item in list
echo ${grocery_list[${#grocery_list[@]}-1]}

# update/replace list items
grocery_list[0]="mango"

# append/add to list
new_item=chocolate
grocery_list+=($new_item)
grocery_list+="chips"
grocery_list[4]="tomato"

# deleting array elements or entire array
unset grocery_list[3]
unset grocery_list

# ops challenge 4 notes
paths=(./demo ./demo/dir1 ./demo/dir2 ./demo/dir3)
mkdir ${paths[*]}
ls 

Strings: 

# concatenate strings
str1="Hello,"
str2=" World"
str3=$str1$str2
echo "$str3"

# concat w/ literal strings
str1="Hello, "
str2="${str1}World"
echo "str2"

# Bash doesn't segregate variables by "type"
# variables are treated as int or str 

# concat variables with digits
str1="Hello, "
int1=3
str2=" Worlds"
str3="$str1$int1$str2"
echo "$str3"

# concat strings w/ += operator
str1="Hello, "
str1+=" World"
echo "$str1"

# concat strings in for loop
str=""
for ELEMENT in 'Hydrogen' 'Helium' 'Lithium' 'Beryllium'; do
    str+="${ELEMENT} "
done 
echo "$str"

Loops -

# for loop
for i in $array
do
echo $i
done
    Example: names=("Bob" "Jane" "Mike" "Sarah")
            for name in ${names[@]}
            do 
            echo $name
            done

# while loop
while [ condition ]; do
echo/function
done

    Example: count=4
            while [ $count -gt 0 ]; do
            echo "Value of count is: $count"
            count=$(($count -1))
            done

Conditionals:

lshw: lists HW info/details/specs

grep: searches for PATTERNS in each FILE

"|" doesn't print it out to screen, but sends to another cmd for further pipes/cmds

#!/bin/bash

# Main
# Search output of lshw cmd and return every line w/ the word "bridge" in it
lshw | grep "bridge" (don't hard code sudo in script, just use it before running file in terminal)


# "cd/var/log"/"cat/var/log" to get to logs in Linux

Batch: 

REM or :: = comment
:: Make script "silent" - don't print each command = "@echo off"
:: declare variable "name" and user input (set /p)
    Ex: set /p name=Enter your name:
    echo Hello, %name%! Welcome to Batch Scripting

:: Conditional Statement
set /p age=Enter your age:
if %age% geq 18 (
    echo You are an adult.
) else (
    echo You are a minor. )

:: For loop
echo Counting from 1 to 5: 
for /1 %%i in (1,1,5) do (
    echo %%1
)

:: While loop; += adds 1 to whatever's in count variable
set count=1
echo Counting from 1 to 5 using while loop:
:whileloop
if %count% gtr 5 goto :endwhileloop
echo %count%
set /a count+=1
goto :whileloop
:endwhileloop

:: File ops
echo Creating a text file named "output.txt"...
echo This is some text that will be written to the file. > output.txt
echo File created successfully.


:: Run bat file "filename.bat" in command prompt

:: End of script
echo Batch script complete
End 
:: (you can use "pause" instead of "End")

:: "cls" clears command prompt